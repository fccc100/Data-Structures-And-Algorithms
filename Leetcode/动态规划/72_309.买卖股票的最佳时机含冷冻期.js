// 309. 最佳买卖股票时机含冷冻期
// 给定一个整数数组prices，其中第  prices[i] 表示第 i 天的股票价格 。​

// 设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

// 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
// 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

// 示例 1:
// 输入: prices = [1,2,3,0,2]
// 输出: 3 
// 解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]

// 动态规划
function maxProfit(prices) {
  // 状态定义：
  // dp[i][0]表示第i天结束后持有股票的最大利润
  // dp[i][1]表示第i天结束后不持有股票并且处于冷冻期的最大利润
  // dp[i][2]表示第i天结束后不持有股票并且不处于冷冻期的最大利润
  let dp = Array(prices.length);
  for (let i = 0; i < dp.length; i++) {
    dp[i] = Array(3);
  }

  // 状态初始化
  dp[0][0] = -prices[0];
  dp[0][1] = 0;
  dp[0][2] = 0;

  // 状态转移
  for (let i = 1; i < prices.length; i++) {
    // 第i天持有股票，要么是前一天就持有的股票dp[i - 1][0], 要么是第i天买入的股票，那么前一天结束后就不能处于冷冻期，因此是dp[i - 1][2] - prices[i]
    dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][2] - prices[i]);

    // 第i天不持有股票且第i天结束后处于冷冻期，那就是在第i天把股票卖出去了，那说明前一天必须持有股票,因此dp[i][1] = dp[i - 1][0] + prices[i];
    dp[i][1] = dp[i - 1][0] + prices[i];

    // 第i天不持有股票且第i天结束后不处于冷冻期，那说明是前一天不持有股票dp[i - 1][1]或者dp[i - 1][2]
    dp[i][2] = Math.max(dp[i - 1][1], dp[i - 1][2]);
  }

  return Math.max(dp[prices.length - 1][1], dp[prices.length - 1][2]);
}