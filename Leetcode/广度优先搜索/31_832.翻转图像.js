// 832. 翻转图像
// 给定一个 n x n 的二进制矩阵 image ，先 水平 翻转图像，然后 反转 图像并返回 结果 。

// 水平翻转图片就是将图片的每一行都进行翻转，即逆序。

// 例如，水平翻转 [1,1,0] 的结果是 [0,1,1]。
// 反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。

// 例如，反转 [0,1,1] 的结果是 [1,0,0]。
 
// 示例 1：

// 输入：image = [[1,1,0],[1,0,1],[0,0,0]]
// 输出：[[1,0,0],[0,1,0],[1,1,1]]
// 解释：首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；
//      然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]
// 示例 2：

// 输入：image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
// 输出：[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
// 解释：首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；
//      然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]

/**
 * @param {number[][]} image
 * @return {number[][]}
 */
var flipAndInvertImage = function(image) {
  let m = image.length;
  if (m == 0) return [];
  let n = image[0].length;

  for (let i = 0; i < m; i++) {
    let l = 0;
    let r = n - 1;
    while (l <= r) {
      swap(image[i], l, r);
      if (l == r) {
        image[i][l] = 1 - image[i][l];
      } else {
        image[i][l] = 1 - image[i][l];
        image[i][r] = 1 - image[i][r];
      }
      l++;
      r--;
    }
  }
  return image;
};

function swap(nums, i, j) {
  let temp = nums[i];
  nums[i] = nums[j];
  nums[j] = temp;
}