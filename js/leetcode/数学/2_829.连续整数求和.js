// 829. 连续整数求和
// 给定一个正整数 n，返回 连续正整数满足所有数字之和为 n 的组数 。 

// 示例 1:

// 输入: n = 5
// 输出: 2
// 解释: 5 = 2 + 3，共有两组连续整数([5],[2,3])求和后为 5。
// 示例 2:

// 输入: n = 9
// 输出: 3
// 解释: 9 = 4 + 5 = 2 + 3 + 4
// 示例 3:

// 输入: n = 15
// 输出: 4
// 解释: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5

/**
 * @param {number} n
 * @return {number}
 */
var consecutiveNumbersSum = function (n) {
  let res = 0;

  // 对区间[i, j]和为n来说
  // (i + j) * (j - i + 1) = 2 * n;
  // j - i + 1 = x;

  // 遍历每个长度为x的[i, j]区间
  for (let x = 1; x < Math.sqrt(2 * n); x++) {

    // 解上面方程得到i的位置
    // let i = (n / x) + ((1 - x) / 2)
    
    // 程序的除法与数学除法不同，需要处理下，大于0下取整，小于0上取整
    let i = Math.floor((n / x)) + ((1 - x) / 2 > 0 ? Math.floor((1 - x) / 2) : Math.ceil((1 - x) / 2));

    // 如果用上面方程计算 这个区间里的和 为n，结果加1
    if ((i + (i + x - 1)) * x == 2 * n) {
      res++;
    }
  }
  return res;
};