// 剑指 Offer 43. 1～n 整数中 1 出现的次数
// 输入一个整数 n ，求1～n这n个整数的十进制表示中1出现的次数。

// 例如，输入12，1～12这些整数中包含1 的数字有1、10、11和12，1一共出现了5次。

// 示例 1：

// 输入：n = 12
// 输出：5
// 示例 2：

// 输入：n = 13
// 输出：6

/**
 * @param {number} n
 * @return {number}
 */
var countDigitOne = function(n) {
  let res = 0;
  
  // 当前处理的位数，从个位开始，初始为1
  let digit = 1;

  // 数字的高位，如999，当前处理个位10，那高位就是99， n / 10
  let high = Math.floor(n / 10);

  // 当前处理位的数字，如999，当前处理个位，那就是9，n % 10
  let cur = n % 10;

  // 地位，当前处理个位，那低位就是0
  let low = 0;

  // 循环条件：只要还有高位或者当前位还不是0
  while(high != 0 || cur != 0) {
    // 根据当前处理的数字是0、1、其他三种情况分类
    if (cur == 0) {
      // 如果当前位是0，那1的个数就是高位 * 当前位数
      // 如2304，求个位1的个数，那就是高位23 * 当前位10 = 230，加到结果中
      res += high * digit;
    } else if (cur == 1) {
      // 如果当前位是1，那1的个数是高位 * 位数 + 低位 + 1
      // 如2314，求个位1的个数，就是23 * 10 + 4 + 1
      res += high * digit + low + 1;
    } else {
      // 如果当前位是2...9,那1的个数是高位 + 1 * 位数
      res += (high + 1) * digit;
    }

    low += cur * digit;
    cur = high % 10;
    high = Math.floor(high / 10);
    digit *= 10;
  }
  return res;
};

// 位数是0
// 10 个位1的个数：1 * 1
// 100 个位1的个数：10 * 1

// 位数是1
// 11个位1的个数：1 * 1 + 0 + 1；
// 111十位1的个数：1 * 10 + 1 + 1

// 位数是2...9
// 99 个位1的个数：(9 + 1) * 1
// 99 十位1的个数：(9 + 1) * 1