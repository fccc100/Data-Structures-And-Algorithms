// 1751. 最多可以参加的会议数目 II
// 给你一个 events 数组，其中 events[i] = [startDayi, endDayi, valuei] ，表示第 i 个会议在 startDayi 天开始，第 endDayi 天结束，
// 如果你参加这个会议，你能得到价值 valuei 。同时给你一个整数 k 表示你能参加的最多会议数目。

// 你同一时间只能参加一个会议。如果你选择参加某个会议，那么你必须 完整 地参加完这个会议。
// 会议结束日期是包含在会议内的，也就是说你不能同时参加一个开始日期与另一个结束日期相同的两个会议。

// 请你返回能得到的会议价值 最大和 。

// 示例 1：

// 输入：events = [[1,2,4],[3,4,3],[2,3,1]], k = 2
// 输出：7
// 解释：选择绿色的活动会议 0 和 1，得到总价值和为 4 + 3 = 7 。
// 示例 2：

// 输入：events = [[1,2,4],[3,4,3],[2,3,10]], k = 2
// 输出：10
// 解释：参加会议 2 ，得到价值和为 10 。
// 你没法再参加别的会议了，因为跟会议 2 有重叠。你 不 需要参加满 k 个会议。
// 示例 3：

// 输入：events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3
// 输出：9
// 解释：尽管会议互不重叠，你只能参加 3 个会议，所以选择价值最大的 3 个会议。

/**
 * @param {number[][]} events
 * @param {number} k
 * @return {number}
 */
// 1.先按结束时间从小到大排序
// 2.定义dp[i][j]表示考虑前i个会议，参加会议次数j的最大价值
// 3.状态转移：
// dp[i][j] ：第i天参加会议次数j的最大价值为：
// 1).第i - 1天参加会议次数为j的最大价值
// 2).往前第一个结束时间比当前会议开始时间小的会议那天 ，参加会议次数j - 1次的最大价值 + 当前会议的价值
// 从两者中取较大者
var maxValue = function(events, k) {
  let n = events.length;
  if (n == 0) return 0;

  // 根据会议结束时间排序
  events.sort((a, b) => a[1] - b[1]);

  // dp[i][j]表示前i个会议，参加会议不超过j个的最大价值
  let dp = Array(n + 1);
  for (let i = 0; i <= n; i++) {
    dp[i] = Array(k + 1).fill(0);
  }

  for (let i = 1; i <= n; i++) {
    let event = events[i - 1];

    // 找到当前会议之前的最后的结束时间小于当前会议开始时间的会议
    let last = 0;
    for (let j = i - 1; j >= 1; j--) {
      let prev = events[j - 1];
      if (prev[1] < event[0]) {
        last = j;
        break;
      }
    }

    for (let j = 1; j <= k; j++) {
      dp[i][j] = Math.max(dp[i - 1][j], dp[last][j - 1] + event[2]);
    }
  }
  return dp[n][k];
}
