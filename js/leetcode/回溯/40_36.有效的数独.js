// 36. 有效的数独
// 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

// 数字 1-9 在每一行只能出现一次。
// 数字 1-9 在每一列只能出现一次。
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 

// 注意：

// 一个有效的数独（部分已被填充）不一定是可解的。
// 只需要根据以上规则，验证已经填入的数字是否有效即可。
// 空白格用 '.' 表示。
 
// 示例 1：
// 输入：board = 
// [["5","3",".",".","7",".",".",".","."]
// ,["6",".",".","1","9","5",".",".","."]
// ,[".","9","8",".",".",".",".","6","."]
// ,["8",".",".",".","6",".",".",".","3"]
// ,["4",".",".","8",".","3",".",".","1"]
// ,["7",".",".",".","2",".",".",".","6"]
// ,[".","6",".",".",".",".","2","8","."]
// ,[".",".",".","4","1","9",".",".","5"]
// ,[".",".",".",".","8",".",".","7","9"]]
// 输出：true

function isValidSudoku(board) {
  let row = Array(9);
  let col = Array(9);
  let bucket = Array(9);
  for (let i = 0; i < 9; i++) {
    row[i] = Array(10).fill(false);
    col[i] = Array(10).fill(false);
    bucket[i] = Array(10).fill(false);
  }

  //  0 1 2     3 4 5   6 7 8
  // 0
  // 1  0         1       2
  // 2

  // 3
  // 4  3
  // 5

  // 3 * (i / 3) + (j / 3);
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      let bucketId = 3 * (Math.floor(i / 3)) + (Math.floor(j / 3));
      if (board[i][j] != '.') {
        let num = board[i][j] - '0';
        if (row[i][num] || col[j][num] || bucket[bucketId][num]) {
          return false;
        }
        row[i][num] = true;
        col[j][num] = true;
        bucket[bucketId][num] = true;
      }
    }
  }
  return true;
}